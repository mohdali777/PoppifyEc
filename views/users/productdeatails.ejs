<%- include('../partials/user/header') %>
<%- include('../partials/user/navbar') %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert/dist/sweetalert.min.js"></script>

<div class="breadcrumbss">
  <a href="/home">Home/</a>  
  <span>Product Deatails</span>
</div>

<div class="container">
    <div class="prdouctDeatails-container">
        <ul class="ulproductdeatails">
            <li><img src="/uploads/<%= products.image[1] %>"alt="" ></li>
            <li><img src="/uploads/<%= products.image[2] %>"alt="" ></li>
            <li><img src="/uploads/<%= products.image[3] %>"alt="" ></li>
            <li><img src="/uploads/<%= products.image[4] %>"alt="" ></li>
        </ul >
        <div class="productdeatailsimg">
            <img src="/uploads/<%= products.image[0] %>"alt="" >
        </div>

        <div class="productdeatails">
          <div class="fontprdeatails">
            <h3><%= products.name%></h3>
            <p class="product-rating">⭐⭐⭐⭐⭐</p>
            <div  style="display: flex; gap: 10px;"><span  id="offerperst" style="  display: none;  font-size: 15px; margin-top: -3px;font-weight: 600;color: red"> -10  %</span>
              <h4 id="originalprice" >  ₹<%= products.price %> </h4>
            </div>
            <!-- <h4 id="price" style="display: none;" disabled>₹</h4 > -->

            <% if (products.offerId && products.offerId.isActive == true ) { %> 
              <input type="text" value="<%= products.offerId.discountValue %>" id="offer-persantage" hidden>
              <input type="text" value="<%= products.offerId.minimumOrderValue %>"id="offer-minimumamount" hidden>
              <p style="font-size: 14px; color: #212121; margin: 8px 0; font-family: 'Roboto', sans-serif; line-height: 1.5;">
                <span style="color: #388e3c; font-weight: 600;"><%= products.offerId.discountValue %>%</span> 
                discount on orders above 
                <span style="color: #000; font-weight: 600;">₹<%= products.offerId.minimumOrderValue %></span>.
            </p>
            <% } %>

            <% if (products.categoryId && products.categoryId.offerId && products.categoryId.offerId.isActive == true) { %> 
              <input type="text" value="<%= products.categoryId.offerId.discountValue %>" id="offer-persantage-category" hidden>
              <input type="text" value="<%= products.categoryId.offerId.minimumOrderValue %>" id="offer-minimumamount-category" hidden>
              <p style="font-size: 14px; color: #212121; margin: 8px 0; font-family: 'Roboto', sans-serif; line-height: 1.5;">
                <span style="color: #388e3c; font-weight: 600;"><%= products.categoryId.offerId.discountValue %>%</span> 
                discount on orders above 
                <span style="color: #000; font-weight: 600;">₹<%= products.categoryId.offerId.minimumOrderValue %></span>.
            </p>
            <% } %>
            
              <p id="quantityid"  style="   font-size: 1rem;
              font-weight: bold;
              color: #333; /* Dark grey for the text */
              margin-top: 10px;
              text-align: center;"> </p>
              <p id="stock-status" > </p>


            

            <h5><%= products.description%> </h5>
          </div>
         <hr>
         <form class="product-details-form">
          <div class="color-options">
          
          </div>
          <label for="size">Size</label>
          <select id="size" name="size" required>
            <option value="">Select Variant</option>
            <% products.variants.forEach(variant => { %>
              <option value="<%= variant.variant %>" data-price="<%= variant.price %>" data-quantity="<%= variant.quantity %>"    data-colors='<%= JSON.stringify(variant.colors) %>'  data-offer="<%= products.offerId ? products.offerId.discountValue : '' %>"
                ><%= variant.variant %> </option>
            <% }); %>
          </select>
          <label for="quantity">Quantity</label>
          <input type="number" id="quantity" name="quantity"  value="1" required>
        
          <input type="button" value="Buy Now" id="button_product" >
          <input type="button" value="Add to Cart" id="button_cart" style="background-color: red;" onclick="addtocart('<%= products._id%>')">
        </form>
         <img src="\images\Frame 911.png" alt="" srcset="">
        </div>
    </div>
    <div class="buttoncontainer" style="display: flex; align-items: center; justify-content: center; margin-top: 20px;" >
        <button type="button" class="btn btn-danger btn-lg" id="btnfor-product" onclick="showreviews()">View All Reviews</button>
        </div>
       
<div style="display: none;" class="reviews-container" id="reviewcontainer" >
  <button type="button" class="btn-close" aria-label="Close" onclick="closeReviewModal()"></button>
  <h1>Product Reviews</h1>
  <div class="review">
    <h3>John Doe</h3>
    <p>Rating: ⭐⭐⭐⭐☆</p>
    <p>Comment: Great product! Really loved the quality and performance.</p>
  </div>

  <div class="review">
    <h3>Jane Smith</h3>
    <p>Rating: ⭐⭐⭐☆☆</p>
    <p>Comment: Decent product, but the delivery was delayed.</p>
  </div>

  <div class="review">
    <h3>Mike Johnson</h3>
    <p>Rating: ⭐⭐⭐⭐⭐</p>
    <p>Comment: Excellent! Exceeded my expectations. Highly recommended!</p>
  </div>

  <div class="review">
    <h3>Emma Brown</h3>
    <p>Rating: ⭐⭐☆☆☆</p>
    <p>Comment: Not satisfied with the product. It didn’t meet the description.</p>
  </div>

  <div class="review">
    <h3>Chris Lee</h3>
    <p>Rating: ⭐⭐⭐⭐☆</p>
    <p>Comment: Good value for money. Would purchase again.</p>
  </div>
</div>

<!-- Pagination -->
</div>

<div class="container py-5">
  <div class="section_category">
    <p class="section_category_p" style="color: red; font-size: 14px;">Related Products </p>
  </div>
  <div class="section_header">
    <p id="demo"></p>
  </div>

  <div class="row row-cols-1 row-cols-md-4 g-4">
    <% category.forEach(product => { %>
      <div class="col">
        <div class="card shadow-sm position-relative" style="width: 270px; height: 350px; border-radius: 10px;">
          <div class="badge bg-danger text-white position-absolute top-0 start-0 m-2" style="width: 40px; height: 20px; font-size: 11px;">-40%</div>
          <div class="p-3" style="background-color: aliceblue; display: flex; justify-content: center; align-items: center; height: 240px;">
            <img class="card-img-top" src="/uploads/<%= product.image[0] %>" alt="<%= product.name %>" style="width: 172px; height: 152px; object-fit: contain;"  onclick="productdeatails('<%= product._id %>','<%= product.category %>')">
          </div>
          <div class="position-absolute top-0 end-0 m-2 d-flex flex-column gap-2">
            <button class="btn  btn-sm rounded-circle shadow-sm <%= product.WishListVerification ? 'btn-danger' : 'btn-light' %> " style="width: 34px; height: 34px;" id="wishlist"   onclick= <%= product.WishListVerification ? 'removeWishlist(\'' + product._id + '\')' : 'addWishlist(\'' + product._id + '\')' %> >
              <i class="bi bi-heart" style="font-size: 15px;"></i>
            </button>
            <button class="btn btn-light btn-sm rounded-circle shadow-sm" style="width: 34px; height: 34px;">
              <i class="bi bi-eye" style="font-size: 15px;"></i>
            </button>
          </div>
          <div class="card-body text-center" style="text-align: start;">
            <p class="card-text text-muted mb-2" style="font-size: 14px; font-weight: 600; color: #333; margin-left: 10px;">
              <%= product.name %>
            </p>
            <h5 class="card-title fw-bold" style="font-size: 18px; font-weight: bold; color: #000;">₹<%= product.price %></h5>
            <div class="text-warning">
              <% for (let i = 0; i < 5; i++) { %>
                <i class="bi bi-star-fill"></i>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    <% }); %>
  </div>

  <div class="buttoncontainer" style="display: flex; align-items: center; justify-content: center; margin-top: 20px;">
    <button type="button" class="btn btn-danger btn-lg">View All Products</button>
  </div>
</div>

  <script>
  const zoomWrappers = document.querySelectorAll(".productdeatailsimg");

zoomWrappers.forEach(wrapper => {
    const img = wrapper.querySelector("img");

    wrapper.addEventListener("mousemove", (e) => {
        const rect = wrapper.getBoundingClientRect();
        const x = (e.clientX - rect.left) / rect.width;
        const y = (e.clientY - rect.top) / rect.height;

        img.style.transformOrigin = `${x * 100}% ${y * 100}%`;
    });

    wrapper.addEventListener("mouseenter", () => {
        img.classList.add("zoomed");
    });

    wrapper.addEventListener("mouseleave", () => {
        img.classList.remove("zoomed");
    });
});
const sizeSelect = document.getElementById('size');
// const priceElement = document.getElementById('price');
const quantityElement = document.getElementById("quantityid");
const stockStatusElement = document.getElementById("stock-status");
const button = document.getElementById("button_product");
const ogprice = document.getElementById("originalprice");
const button1 = document.getElementById("button_cart");
const colorOptionsContainer = document.querySelector('.color-options');
let SelectColor;
let SelectColorQuantity;


const discountper = document.getElementById("offer-persantage") ? parseFloat(document.getElementById("offer-persantage").value) : 0;
const discountmini = document.getElementById("offer-minimumamount") ? parseFloat(document.getElementById("offer-minimumamount").value) : 0;

const discountperCategory = document.getElementById("offer-persantage-category") ? parseFloat(document.getElementById("offer-persantage-category").value) : 0;
const discountminiCategory = document.getElementById("offer-minimumamount-category") ? parseFloat(document.getElementById("offer-minimumamount-category").value) : 0;


sizeSelect.addEventListener('change', function () {
  const selectedOption = sizeSelect.options[sizeSelect.selectedIndex];
  const colors = JSON.parse(selectedOption.getAttribute('data-colors') || '[]');
  const price = selectedOption.getAttribute('data-price');
  const quantity = parseInt(selectedOption.getAttribute('data-quantity'), 10); 
  const qualityvalue = document.getElementById("quantity").value;


  
  if (price) {
    ogprice.textContent = `₹${price}`;
  } else {
    priceElement.textContent = "N/A";
  }

  let finalPrice = price;
  if (discountper > 0 && price >= discountmini) {
    finalPrice = price - (price * discountper / 100);
  }

  
  if (discountperCategory > 0 && finalPrice >= discountminiCategory) {
    finalPrice = finalPrice - (finalPrice * discountperCategory / 100);
  }

 
  if (finalPrice !== price) {
    let priceElement = document.getElementById("price");
    if (!priceElement) {
      priceElement = document.createElement("h4");
      priceElement.id = "price";
      ogprice.parentNode.insertBefore(priceElement, ogprice.nextSibling); // Insert after the original price
    }

    priceElement.textContent = `₹${finalPrice.toFixed(2)}`;
    ogprice.style.textDecoration = "line-through red";
  } else {
   
    const priceElement = document.getElementById("price");
    if (priceElement) priceElement.remove();
    ogprice.style.textDecoration = "none";
  }
  
  if (!isNaN(quantity)) {
    quantityElement.textContent = `${quantity}`;
  } else {
    quantityElement.textContent = "N/A";
  }

  
  if (quantity === 0) {
    stockStatusElement.textContent = "Out Of Stock";
    stockStatusElement.style.color = "red";
    button.disabled = true;
    button1.disabled = true;
  } else if (quantity <= 5) {
    stockStatusElement.textContent = "Low Stock";
    stockStatusElement.style.color = "orange";
    button.disabled = false;
    button1.disabled = false;
  } else {
    stockStatusElement.textContent = ""; 
    stockStatusElement.style.color = ""; 
    button.disabled = false;
    button1.disabled = false;
  }


  updateColorOptions(colors);


  document.querySelectorAll('input[name="color"]').forEach(input => {
  input.addEventListener("change", () => {
    console.log("s");
    if (input.checked) {
      console.log(input.value);  // Logs the value of the selected radio button
      console.log(input.getAttribute('data-quantity'));
      const colorQuantity = input.getAttribute('data-quantity')
      quantityElement.textContent = `${colorQuantity}`;
      SelectColor = input.value
      console.log(SelectColor);
      SelectColorQuantity = (colorQuantity)
      

      if (colorQuantity === 0) {
    stockStatusElement.textContent = "Out Of Stock";
    stockStatusElement.style.color = "red";
    button.disabled = true;
    button1.disabled = true;
  } else if (colorQuantity <= 5) {
    stockStatusElement.textContent = "Low Stock";
    stockStatusElement.style.color = "orange";
    button.disabled = false;
    button1.disabled = false;
  } else {
    stockStatusElement.textContent = ""; 
    stockStatusElement.style.color = ""; 
    button.disabled = false;
    button1.disabled = false;
  }
      
      
    }
    
  });
});


});

function updateColorOptions(colors) {
  // Clear the previous color options
  colorOptionsContainer.innerHTML = '';

  if (colors.length > 0) {
    colors.forEach((color, index) => {
      // Create color option elements
      const colorOption = document.createElement('div');
      colorOption.className = 'color-option';

      const colorInput = document.createElement('input');
      colorInput.type = 'radio';
      colorInput.name = 'color';
      colorInput.id = color.color;
      colorInput.value = color.color;
      colorInput.setAttribute('data-quantity', color.quantity);

      const colorLabel = document.createElement('label');
      colorLabel.htmlFor = color.color;
      colorLabel.className = 'color-circle';
      colorLabel.style.backgroundColor = color.color;
      

      colorOption.appendChild(colorInput);
      colorOption.appendChild(colorLabel);

      colorOptionsContainer.appendChild(colorOption);
    });
  } else {
    // Show a message if no colors are available
    const noColorsMessage = document.createElement('p');
    noColorsMessage.textContent = "No colors available for this variant.";
    colorOptionsContainer.appendChild(noColorsMessage);
  }
}

document.getElementById('quantity').addEventListener('input', function() {
    const quantityInput = document.getElementById('quantity');  
    const enteredQuantity = parseInt(quantityInput.value, 10); 
    const quantityElement = document.getElementById("quantityid"); 
    const totalquantity = parseInt(quantityElement.textContent, 10);
    if (enteredQuantity > totalquantity) {
      swal({
                title: "Error!",
                text: "Limit Exceed.",
                icon: "info", 
                button: "OK",  
            });
        quantityInput.value = totalquantity;
    }
});



function showreviews(){
  const reviewcontainer = document.getElementById("reviewcontainer")
  reviewcontainer.style.display = 'block'
}
function closeReviewModal (){
   const reviewcontainer = document.getElementById("reviewcontainer")
  reviewcontainer.style.display = 'none'
}

document.getElementById("quantity").addEventListener('input', function () {
  const quantityInput = document.getElementById('quantity');
  const buyButton = document.getElementById('button_product');
    if (quantityInput.value >= 1) {
      buyButton.disabled = false;
      button1.disabled =false;
    } else {
      buyButton.disabled = true;
      button1.disabled =true;
    }
  });

  function addtocart(productId){
    const offerprice = document.getElementById("price");
    const ogprice = document.getElementById("originalprice");
    console.log(offerprice);
    console.log(ogprice);
    
    
    if (!offerprice && !ogprice) {
        console.error("Price elements not found!");
        return;
    }
    const priceText = offerprice ? offerprice.textContent : ogprice.textContent;
  
    const price = parseFloat(priceText.replace('₹', '').trim());

    console.log("Price:", price);


    // Check if price is valid
    if (isNaN(price) || price <= 0) {
        console.error("Invalid price!");
        return;
    }
 
    console.log(price);

    const offerPriceText = offerprice ? offerprice.textContent : null;
const originalPriceText = ogprice ? ogprice.textContent : null;

// Parse the prices into numbers
const offerPriceValue = offerPriceText ? parseFloat(offerPriceText.replace('₹', '').trim()) : null;
const originalPriceValue = originalPriceText ? parseFloat(originalPriceText.replace('₹', '').trim()) : null;

console.log("Offer Price:", offerPriceValue);
console.log("Original Price:", originalPriceValue);

// Validate prices
if ((offerPriceValue === null && originalPriceValue === null) || 
    (offerPriceValue !== null && offerPriceValue <= 0) || 
    (originalPriceValue !== null && originalPriceValue <= 0)) {
    console.error("Invalid price data!");
    return;
}

// Calculate the offer amount (discount)
const offerAmount = (originalPriceValue && offerPriceValue) ? (originalPriceValue - offerPriceValue) : 0;

console.log("Offer Amount:", offerAmount);

console.log(SelectColorQuantity)
console.log(SelectColor);


  const selectedQuantity = document.getElementById("quantity").value;
  const variantElement = document.getElementById("size");
    if (!variantElement) {
        console.error('Variant select element not found!');
        return;
    }
    if (variantElement.selectedIndex === -1) {
        console.error('No variant selected!');
        return;
    }
    const selectedVariant = variantElement.options[variantElement.selectedIndex];
    const variantName = selectedVariant.value;
    const totalquantity = parseInt(selectedVariant.getAttribute("data-quantity"), 10);
    const ColorName = SelectColor;
    const colorQuantity = SelectColorQuantity;

  
  const cart = {
    productId :productId ,
    price:price,
    quantity:selectedQuantity,
    variant:variantName,
    totalquantity:totalquantity,
    discoundOfferPrice:offerAmount,
    color:ColorName,
    colorQuantity:colorQuantity
  }

  fetch('/add-to-cart', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(cart)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      swal({
  title: "Success!",
  text: "Product added to cart successfully!",
  icon: "success", 
  button: "OK", 
});

    } else {
      swal({
  title: "Error!",
  text: "Failed to add product to cart. Please try again.",
  icon: "error", // Use the error icon
  button: "OK",  // Customize button text
});

    }
  })
  .catch(error => {
    console.error('Error:', error);
    swal({
  title: "Error!",
  text: "Something Went Wrong",
  icon: "error", 
  button: "OK",  
});
  });
}

function productdeatails (productId,category){
        console.log("............");
        console.log(productId);
        console.log("............");
        
  fetch(`/productdeatails/${productId}/${category}`,{method:"GET"}).then((response)=>{
 if(response.ok) window.location.href = `/productdeatails/${productId}/${category}`
  }).catch((err)=>{
console.log(err);

  })
      }


      function addWishlist(productId) {
  fetch(`/addwishlist/${productId}`, { method: "POST" })
    .then((response) => {
      if (!response.ok) {
        throw new Error("Failed to add product to wishlist");
      }
      return response.json(); 
    })
    .then((data) => {
      if (data.success) {
        alert(data.message || "Product added to wishlist!");
        const button = document.getElementById("wishlist");
       button.style.backgroundColor = "red";
        window.location.reload(); 
      } else {
        alert(data.message || "Unable to add product to wishlist.");
      }
    })
    .catch((error) => {
      console.error("Error adding product to wishlist:", error);
      alert("An error occurred. Please try again later.");
    });
}

function removeWishlist(productId) {
  fetch(`/removewishlis/${productId}`, { method: "POST" })
    .then((response) => {
      if (!response.ok) {
        throw new Error("Failed to add product to wishlist");
      }
      return response.json(); 
    })
    .then((data) => {
      if (data.success) {
        alert(data.message || "Product removed to wishlist!");
        const button = document.getElementById("wishlist");
       button.style.backgroundColor = "red";
        window.location.reload(); 
      } else {
        alert(data.message || "Unable to remove product to wishlist.");
      }
    })
    .catch((error) => {
      console.error("Error removing product to wishlist:", error);
      alert("An error occurred. Please try again later.");
    });
}
  </script>
<%- include('../partials/user/footer') %>