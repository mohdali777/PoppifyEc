<%- include('../partials/admin/header') %>
<%- include('../partials/admin/sidebar') %>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">


<link rel="stylesheet" href="/admincss/addproduct.css">

<form class="add-product-form" action="/admin/add-product" method="post" enctype="multipart/form-data">
    <label for="product-name">Product Name</label>
    <input type="text" id="product-name" class="custom-width" placeholder="Enter product name" name="name" required>

    <label for="description">Description</label>
    <textarea id="description" class="custom-width" placeholder="Enter description" name="description" required></textarea>

    <label for="image-upload">Upload Product Images</label>
    <input type="file" id="image-upload" class="custom-width" accept="image/*" name="images" multiple onchange="openCropper(event)">

    <!-- Cropper Modal -->
    <div id="cropper-modal" style="display:none; position:fixed; top:10%; left:10%; width:80%; background:white; z-index:1000; padding:20px; border:1px solid #ccc;">
        <div style="text-align:center;">
            <img id="cropper-image" style="max-width:100%; max-height:500px;" />
        </div>
        <button id="crop-button" >Crop</button>
        <button onclick="closeCropper()">Cancel</button>
    </div>

    <div id="image-preview" class="image-preview-container"></div>

    <label for="category">Category</label>
    <select id="category" class="custom-width" name="category" required>
        <option value="">Select a category</option>
        <% categories.forEach(category => { %>
            <option value="<%= category.name %>"><%= category.name %></option>
        <% }) %>
    </select>

    <label for="price">Base Price</label>
    <input type="text" id="price" class="custom-width" placeholder="Enter price" name="price" required>

    <label for="brand">Brand</label>
    <input type="text" id="brand" class="custom-width" placeholder="Enter brand name" name="brand" required>

  <label>Variants:</label>
<div id="variant-container">
    <div class="variant-row">
        <input type="text" name="variant" placeholder="Variant (e.g., 64 GB)" required>
        <input type="number" name="price" placeholder="Price" required>
        <label for="quantity">Quantity</label>
        <input type="number" id="quantity" class="custom-width" placeholder="Enter quantity" name="quantity" required>
        <label>Select Colors:</label>
        <div class="color-options">
            <input type="checkbox" name="colors" id="red" value="red">
            <label for="red" class="color-circle red"></label>
            <input type="checkbox" name="colors" id="black" value="black">
            <label for="black" class="color-circle black"></label>
            <input type="checkbox" name="colors" id="blue" value="blue">
            <label for="blue" class="color-circle blue"></label>
            <input type="checkbox" name="colors" id="green" value="green">
            <label for="green" class="color-circle green"></label>
        </div>
        <button type="button" onclick="removeVariant(this)">Remove</button>
    </div>
</div>
<button type="button" onclick="addVariant()">Add Variant</button>


    <button type="submit" class="submit-btn">Add Product</button>
</form>


<script>
    let imageFiles = []; // Array to store the selected files
    let cropper; // Variable to store Cropper instance
    let croppedImages = []; // Array to store cropped images

    // Open cropper modal when file is selected

    function addVariant() {
    const container = document.getElementById('variant-container');
    const row = document.createElement('div');
    row.classList.add('variant-row');
    row.innerHTML = `
        <input type="text" name="variant" placeholder="Variant (e.g., 64 GB)" required>
        <input type="number" name="price" placeholder="Price" required>
          <label for="quantity">Quantity</label>
        <input type="number" id="quantity" class="custom-width" placeholder="Enter quantity" name="quantity" required>
        <label>Select Colors:</label>
        <div class="color-options">
            <input type="checkbox" name="colors" id="red" value="red">
            <label for="red" class="color-circle red"></label>
            <input type="checkbox" name="colors" id="black" value="black">
            <label for="black" class="color-circle black"></label>
            <input type="checkbox" name="colors" id="blue" value="blue">
            <label for="blue" class="color-circle blue"></label>
            <input type="checkbox" name="colors" id="green" value="green">
            <label for="green" class="color-circle green"></label>
        </div>
        <button type="button" onclick="removeVariant(this)">Remove</button>
    `;
    container.appendChild(row);
}

function removeVariant(button) {
    button.parentElement.remove(); // Remove the row
}



    function openCropper(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function(e) {
            const cropperImage = document.getElementById('cropper-image');
            cropperImage.src = e.target.result;
            document.getElementById('cropper-modal').style.display = 'block';

            // Initialize the Cropper.js instance
            if (cropper) cropper.destroy(); // Destroy previous cropper instance if it exists
            cropper = new Cropper(cropperImage, {
                aspectRatio: NaN, // Set aspect ratio to 1:1 (Square)
                viewMode: 1, // Restrict cropping to image boundaries
            });
        };
        reader.readAsDataURL(file);
    }

    // Close cropper modal
    function closeCropper() {
        document.getElementById('cropper-modal').style.display = 'none';
    }

    // Handle cropping and save the cropped image
    document.getElementById('crop-button').addEventListener('click', function() {
    const croppedCanvas = cropper.getCroppedCanvas();
    croppedCanvas.toBlob(blob => {
        // Convert the Blob into a File and add to the croppedImages array
        const file = new File([blob], `cropped-image-${croppedImages.length + 1}.jpg`, { type: 'image/jpeg' });
        croppedImages.push(file); // Add file to array

        // Optionally, display the preview of the image
        displayImagePreview(file);
    });

    closeCropper(); // Close the cropper modal after cropping
});

// Function to display preview of the cropped image
function displayImagePreview(file) {
    const previewContainer = document.getElementById('image-preview');
    const imgWrapper = document.createElement('div');
    imgWrapper.className = 'image-wrapper';

    const img = document.createElement('img');
    img.src = URL.createObjectURL(file);  // Create an object URL for the file
    img.className = 'preview-image';

    // Create a remove button for the image
    const removeButton = document.createElement('button');
    removeButton.className = 'remove-button';
    removeButton.textContent = 'Remove';
    removeButton.title = 'Remove Image';

    removeButton.addEventListener('click', () => {
        // Remove the file from the croppedImages array
        const index = croppedImages.indexOf(file);
        if (index > -1) {
            croppedImages.splice(index, 1);  // Remove file from array
        }
        imgWrapper.remove();  // Remove the image preview from the DOM
    });

    imgWrapper.appendChild(img);
    imgWrapper.appendChild(removeButton);
    previewContainer.appendChild(imgWrapper);
}

    // Handle form submission
    document.querySelector('.add-product-form').addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent default form submission

        const formData = new FormData();

        // Append form fields
        formData.append('name', document.getElementById('product-name').value);
        formData.append('description', document.getElementById('description').value);
        formData.append('category', document.getElementById('category').value);
        formData.append('price', document.getElementById('price').value);
        formData.append('quantity', document.getElementById('quantity').value);
        formData.append('brand', document.getElementById('brand').value);

const selectedColors = Array.from(document.querySelectorAll('input[name="colors"]:checked')).map(el => el.value);
selectedColors.forEach(color => formData.append('colors[]', color)); 


const variants = [];
document.querySelectorAll('.variant-row').forEach(row => {
    const variant = row.querySelector('input[name="variant"]').value;
    const price = row.querySelector('input[name="price"]').value;
    const quantity = row.querySelector('input[name="quantity"]').value;

    const colorInputs = row.querySelectorAll('input[name="colors"]:checked');
    const colors = Array.from(colorInputs).map(input => input.value); // Get values of checked boxes

    if (variant && price && quantity && colors.length > 0) {
        variants.push({ 
            variant, 
            price: parseFloat(price), 
            quantity: parseInt(quantity), 
            colors 
        });
    }
});

if (variants.length === 0) {
    variants = [];
}
    formData.append('variants', JSON.stringify(variants)); // Add as a JSON string

        croppedImages.forEach((file, index) => {
            formData.append('images', file);
        });

        // Send the form data to the server
        fetch('/admin/add-product', {
            method: 'POST',
            body: formData,
        }).then((response) => {
            if (response.ok) window.location.reload();
        })
        .catch(error => console.error('Error:', error));
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<%- include('../partials/admin/footer') %>