<%- include('../partials/admin/header') %>
<%- include('../partials/admin/sidebar') %>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>


<link rel="stylesheet" href="/admincss/addproduct.css">

<form class="add-product-form"  enctype="multipart/form-data" id="updateproduct"> 
    <label for="product-name">Product Name</label>
    <input type="text" id="product-name" class="custom-width" placeholder="Enter product name" name="name" value="<%=product.name%>" required>
    <input type="hidden" value="<%= product._id %>" id="productId" >

    <label for="description">Description</label>
    <textarea id="description" class="custom-width" placeholder="Enter description" name="description" required><%=product.description%></textarea>

    <label for="image-upload">Upload Product Images</label>
    <input type="file" id="image-upload" class="custom-width" accept="image/*" name="images" multiple onchange="openCropper(event)">

    <!-- Cropper Modal -->
    <div id="cropper-modal" style="display:none; position:fixed; top:10%; left:10%; width:80%; background:white; z-index:1000; padding:20px; border:1px solid #ccc;">
        <div style="text-align:center;">
            <img id="cropper-image" style="max-width:100%; max-height:500px;" />
        </div>
        <button id="crop-button" >Crop</button>
        <button onclick="closeCropper()">Cancel</button>
    </div>

    <div id="image-preview" class="image-preview-container">
        <% product.image.forEach((image) => { %>
            <div class="image-wrapper">
                <img id="imgsrc" src="/uploads/<%= image %>" class="preview-image" />
                <button type="button" class="remove-button" onclick="removeImage('<%= image %>','<%= product._id %>')">Remove</button>
            </div>
        <% }) %>
    </div>

    <label for="category">Category</label>
    <select id="category" class="custom-width" name="category" required>
        <option value="">Select a category</option>
        <% categories.forEach(category => { %>
            <option value="<%= category.name %>" <%= category.name === product.category ? 'selected' : '' %>><%= category.name %></option>
        <% }) %>
    </select>

    <label for="price">Base Price</label>
    <input type="text" id="price" class="custom-width" placeholder="Enter price" name="price" value="<%=product.price%>" required>

    <label for="brand">Brand</label>
    <input type="text" id="brand" class="custom-width" placeholder="Enter brand name" name="brand" value="<%=product.brand%>" required>

<label>Variants:</label>
<div id="variant-container">
    <div class="variant-row">
        <% product.variants.forEach(variant=>{ %>
        <input type="text" name="variant" placeholder="Variant (e.g., 64 GB)" value="<%=variant.variant%>" required>
        <input type="number" name="price" placeholder="Price" value="<%=variant.price%>" required>
        <label for="quantity" >Quantity</label>
        <input type="number" id="quantity" class="custom-width" placeholder="Enter quantity" value="<%=variant.quantity%>" name="quantity" required>
        <label>Select Colors:</label>
        <% ['red', 'black', 'blue', 'green'].forEach(color => { %>
            <div class="color-options">
            <input type="checkbox" name="colors" id="<%= color %>" value="<%= color %>" <%= variant.colors.includes(color) ? 'checked' : '' %>>
            <label for="<%= color %>" class="color-circle <%= color %>"></label>
        </div>
        <% }) %>
   
    <% }) %>
        <button type="button" onclick="removeVariant(this)">Remove</button>
    </div>
</div>
<button type="button" onclick="addVariant()">Add Variant</button>


    <button type="submit" class="submit-btn">Update Product</button>
</form>


<script>
  let imageFiles = []; // Array to store the selected files
let cropper; // Variable to store Cropper instance
let croppedImages = []; // Array to store cropped images

function addVariant() {
    const container = document.getElementById('variant-container');
    const row = document.createElement('div');
    row.classList.add('variant-row');
    row.innerHTML = `
        <input type="text" name="variant" placeholder="Variant (e.g., 64 GB)" required>
        <input type="number" name="price" placeholder="Price" required>
          <label for="quantity">Quantity</label>
        <input type="number" id="quantity" class="custom-width" placeholder="Enter quantity" name="quantity" required>
        <label>Select Colors:</label>
        <div class="color-options">
            <input type="checkbox" name="colors" id="red" value="red">
            <label for="red" class="color-circle red"></label>
            <input type="checkbox" name="colors" id="black" value="black">
            <label for="black" class="color-circle black"></label>
            <input type="checkbox" name="colors" id="blue" value="blue">
            <label for="blue" class="color-circle blue"></label>
            <input type="checkbox" name="colors" id="green" value="green">
            <label for="green" class="color-circle green"></label>
        </div>
        <button type="button" onclick="removeVariant(this)">Remove</button>
    `;
    container.appendChild(row);
}

function removeVariant(button) {
    button.parentElement.remove(); // Remove the row
}



function removeVariant(button) {
    button.parentElement.remove(); // Remove the row
}
// Open cropper modal when file is selected
function openCropper(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        const cropperImage = document.getElementById('cropper-image');
        cropperImage.src = e.target.result;
        document.getElementById('cropper-modal').style.display = 'block';

        // Initialize the Cropper.js instance
        if (cropper) cropper.destroy(); // Destroy previous cropper instance if it exists
        cropper = new Cropper(cropperImage, {
            aspectRatio: NaN, // Set aspect ratio to 1:1 (Square)
            viewMode: 1, // Restrict cropping to image boundaries
        });
    };
    reader.readAsDataURL(file);
}

// Close cropper modal
function closeCropper() {
    document.getElementById('cropper-modal').style.display = 'none';
}

// Handle cropping and save the cropped image
document.getElementById('crop-button').addEventListener('click', function(e) {
    e.preventDefault()
    const croppedCanvas = cropper.getCroppedCanvas();
    croppedCanvas.toBlob(blob => {
        // Convert the Blob into a File and add to the croppedImages array
        const file = new File([blob], `cropped-image-${croppedImages.length + 1}.jpg`, { type: 'image/jpeg' });
        croppedImages.push(file); // Add file to array

        // Optionally, display the preview of the image
        displayImagePreview(file);
    });

    closeCropper(); // Close the cropper modal after cropping
});

// Function to display preview of the cropped image
function displayImagePreview(file) {
    const previewContainer = document.getElementById('image-preview');
    
    // Create a new wrapper for the new image
    const imgWrapper = document.createElement('div');
    imgWrapper.classList.add('image-wrapper');
    
    const img = document.createElement('img');
    img.src = URL.createObjectURL(file);  // Create an object URL for the file
    img.classList.add('preview-image');   // Optional: add a class for styling
    
    // Create a remove button for the image
    const removeButton = document.createElement('button');
    removeButton.classList.add('remove-button');
    removeButton.textContent = 'Remove';
    removeButton.title = 'Remove Image';

    removeButton.addEventListener('click', (e) => {
        const index = croppedImages.indexOf(file);
        if (index > -1) {
            croppedImages.splice(index, 1);  // Remove file from array
        }
        imgWrapper.remove();  // Remove the image preview from the DOM
    });

    // Append the image and button to the wrapper
    imgWrapper.appendChild(img);
    imgWrapper.appendChild(removeButton);
    
    // Add the wrapper to the preview container
    previewContainer.appendChild(imgWrapper);
}

function removeImage(image, productid) {
    fetch(`/admin/removeimage/${image}/${productid}`, { method: "POST" })
        .then((response) => {
            if (response.ok) window.location.reload();
        })
        .catch((err) => {
            console.log(err);
        });
}

// Handle form submission
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('updateproduct').addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent default form submission

        const formData = new FormData();
        const productIdd = document.getElementById('productId')?.value || '';
        if (!productIdd) {
            alert('Product ID is missing');
            return;
        }

        // Append form fields
        formData.append('name', document.getElementById('product-name').value);
        formData.append('description', document.getElementById('description').value);
        formData.append('category', document.getElementById('category').value);
        formData.append('price', document.getElementById('price').value);
        formData.append('brand', document.getElementById('brand').value);
        formData.append('id', productIdd);
        const variants = [];
document.querySelectorAll('.variant-row').forEach(row => {
    const variant = row.querySelector('input[name="variant"]').value;
    const price = row.querySelector('input[name="price"]').value;
    const quantity = row.querySelector('input[name="quantity"]').value;

    const colorInputs = row.querySelectorAll('input[name="colors"]:checked');
    const colors = Array.from(colorInputs).map(input => input.value); // Get values of checked boxes

    if (variant && price && quantity && colors.length > 0) {
        variants.push({ 
            variant, 
            price: parseFloat(price), 
            quantity: parseInt(quantity), 
            colors 
        });
    }
});

if (variants.length === 0) {
    variants = [];
}
    formData.append('variants', JSON.stringify(variants)); // Add as a JSON string


            croppedImages.forEach((file) => {
                formData.append('images', file);
            });
        

        // Send the form data to the server
        fetch('/admin/update-product', {
            method: 'POST',
            body: formData,
        })
        .then(async (response) => {
            if (response.ok) {
                window.location.reload();
            } else {
                const errorMsg = await response.text();
                console.error('Server Error:', errorMsg);
                alert(`Error updating the product: ${errorMsg}`);
            }
        })
        .catch(error => console.error('Fetch Error:', error));
    });
});

</script>

<%- include('../partials/admin/footer') %>